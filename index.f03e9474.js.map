{"mappings":"AAEA,SAASA,UAIR,CAAAC,IAEuB,oBAAXC,SAAwBA,OAAOF,OAASA,QAKnD,MAAMG,EAAc,IAClBD,OAAOE,mBACPF,OAAOG,yBACPC,QAGFH,EAAYI,gBAAiB,EAC7BJ,EAAYK,KAAOC,UAAUC,UAAY,QAEzCV,OAAOG,YAAcA,EAKrBH,OAAOW,OAASC,MAAMC,GACb,IAAIC,SAAQC,IACjB,IAAIJ,EAASK,gBAAgBC,YACzBN,EAAOO,QAAQH,EAAEJ,GACrBK,gBAAgBG,gBAAkBN,GAAKE,EAAEC,gBAAgBC,gBAO7DjB,OAAOoB,IAAMR,MAAOS,EAAMC,EAAQ,UAChC,MAAMC,EAAS,IAAIC,yBAAyBH,GACtCV,QAAeX,OAAOW,SACtBH,EAAOL,EAAYK,KAQzB,OAJEe,EAAOD,MADLA,GACcX,EAAOc,QAAOC,GAAKA,EAAEC,MAAQL,KAAUX,GAAQ,IAE/CA,EAAOc,QAAOC,GAAKA,EAAElB,MAAQA,KAASG,GAAQ,GAEzD,IAAIG,SAAQc,IACjBL,EAAOM,MAAQjB,SAAYgB,EAAQL,GACnCP,gBAAgBc,MAAMP,OAO1BvB,OAAO+B,OAASnB,MAAOoB,EAAQ,MAC7B7B,EAAY8B,QAAUjC,OAAO+B,OAAOG,QACpC/B,EAAY0B,MAAQ7B,OAAO+B,OAAOI,MAClChC,EAAYiC,QAAUpC,OAAO+B,OAAOM,QACpClC,EAAYmC,WAAaN,EAAMM,WAExB,IAAIxB,SAAQ,CAACc,EAASW,KAC3BpC,EAAYqC,SAAW5B,MAAMC,GAOjC,SAA2B4B,EAAOb,GAChC,MAAMc,EAAUD,EAAMC,QAChBC,EAAU,GAGhB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQxB,OAAQ0B,IAElCD,EAAQE,KAAKH,EAAQE,GAAG,GAAGE,YAGvBJ,EAAQE,GAAGG,SACbnB,EAAQc,EAAQE,GAAG,GAAGE,WAAYL,GAGtCzC,OAAO+B,OAAOiB,UAAUL,EAAQM,KAAK,IAAKR,GAC1CE,EAAQzB,OAAS,EAtBmBgC,CAAkBrC,EAAGe,GAEvD,IAAMzB,EAAYgD,QAClB,MAAOtC,GAAK0B,EAAO1B,QAyBvBb,OAAOoD,MAAQC,GACN,IAAIvC,SAAQc,GAAW0B,WAAW1B,EAASyB,KAMpDrD,OAAO+B,OAAOwB,KAAO3C,MAAMC,IACzBb,OAAOG,YAAYoD,QAMrBvD,OAAO+B,OAAOyB,GAAK,CACjBC,QAASC,GAAM1D,OAAO+B,OAAOiB,UAAYU,EACvCP,MAAOO,GAAM1D,OAAO+B,OAAOG,QAAUwB,EACrCC,IAAKD,GAAM1D,OAAO+B,OAAOI,MAAQuB,EACjCE,MAAOF,GAAM1D,OAAO+B,OAAOM,QAAUqB,GAGzC1D,OAAO+B,OAAOiB,UAAYnC,IAAK,EAC/Bb,OAAO+B,OAAOG,QAAUrB,IAAK,EAC7Bb,OAAO+B,OAAOI,MAAQtB,IAAK,EAC3Bb,OAAO+B,OAAOM,QAAUxB,IAAK,EAK7Bb,OAAO+B,OAAO8B,UAAYhD,KAAOV,EAAYgD,OApH9C","sources":["src/spoken.js"],"sourcesContent":["// DO NOT EDIT FILE\n// THIS FILE IS BUILT WITH GULP\nfunction spoken() { }\n// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n// Speech SDK for Voice to Text and Text to Voice\n// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n(_ => {\n  'use strict';\n  if (typeof window !== 'undefined') window.spoken = spoken;\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Setup Speech Regcognition\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  const recognition = new (\n    window.SpeechRecognition ||\n    window.webkitSpeechRecognition ||\n    Object\n  )();\n\n  recognition.interimResults = true;\n  recognition.lang = navigator.language || 'en-US';\n\n  spoken.recognition = recognition;\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Get Voices for Text-to-Speech\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  spoken.voices = async e => {\n    return new Promise(r => {\n      let voices = speechSynthesis.getVoices();\n      if (voices.length) r(voices);\n      speechSynthesis.onvoiceschanged = e => r(speechSynthesis.getVoices());\n    });\n  };\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Invoike Synthetic Voices for Text-to-Speech\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  spoken.say = async (text, voice = 'Alex') => {\n    const speech = new SpeechSynthesisUtterance(text);\n    const voices = await spoken.voices();\n    const lang = recognition.lang;\n\n    // Select Voice with Default\n    if (voice)\n      speech.voice = (voices.filter(v => v.name == voice) || voices)[0];\n    else\n      speech.voice = (voices.filter(v => v.lang == lang) || voices)[0];\n\n    return new Promise(resolve => {\n      speech.onend = async () => resolve(speech);\n      speechSynthesis.speak(speech);\n    });\n  };\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Speech to Text - Listens to your voice and creates a transcription.\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  spoken.listen = async (setup = {}) => {\n    recognition.onstart = spoken.listen.startcb;\n    recognition.onend = spoken.listen.endcb;\n    recognition.onerror = spoken.listen.errorcb;\n    recognition.continuous = setup.continuous;\n\n    return new Promise((resolve, reject) => {\n      recognition.onresult = async e => transcriptResults(e, resolve);\n\n      try { recognition.start() }\n      catch (e) { reject(e) }\n    });\n  };\n\n  function transcriptResults(event, resolve) {\n    const results = event.results;\n    const interim = [];\n\n    // Results\n    for (let i = 0; i < results.length; i++) {\n      // Interim Result\n      interim.push(results[i][0].transcript);\n\n      // Final Result\n      if (results[i].isFinal)\n        resolve(results[i][0].transcript, event);\n    }\n\n    spoken.listen.partialcb(interim.join(''), event);\n    interim.length = 0;\n  }\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Easy Wait Command\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  spoken.delay = duration => {\n    return new Promise(resolve => setTimeout(resolve, duration));\n  }\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Stop Speech to Text Voice Recognition\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  spoken.listen.stop = async e => {\n    spoken.recognition.stop();\n  };\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Speech to Text - Transcription Events\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  spoken.listen.on = {\n    partial: cb => spoken.listen.partialcb = cb\n    , start: cb => spoken.listen.startcb = cb\n    , end: cb => spoken.listen.endcb = cb\n    , error: cb => spoken.listen.errorcb = cb\n  };\n\n  spoken.listen.partialcb = e => true;\n  spoken.listen.startcb = e => true;\n  spoken.listen.endcb = e => true;\n  spoken.listen.errorcb = e => true;\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Speech to Text is Available\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  spoken.listen.available = e => !!recognition.start;\n\n})();\n"],"names":["spoken","_","window","recognition","SpeechRecognition","webkitSpeechRecognition","Object","interimResults","lang","navigator","language","voices","async","e","Promise","r","speechSynthesis","getVoices","length","onvoiceschanged","say","text","voice","speech","SpeechSynthesisUtterance","filter","v","name","resolve","onend","speak","listen","setup","onstart","startcb","endcb","onerror","errorcb","continuous","reject","onresult","event","results","interim","i","push","transcript","isFinal","partialcb","join","transcriptResults","start","delay","duration","setTimeout","stop","on","partial","cb","end","error","available"],"version":3,"file":"index.f03e9474.js.map"}