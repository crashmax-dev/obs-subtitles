{"mappings":"AAAC,CAAAA,IAMC,MAEMC,EAkLI,uCAAuCC,QAAO,SACpD,SAAUC,GACR,IAAIC,EAAoB,GAAhBC,KAAKC,SAAgB,EAC7B,OADyC,KAALH,EAAWC,EAAS,EAAJA,EAAU,GACrDG,SAAS,OAlLlBC,GAAaC,EAAQ,cAAgB,EACrCC,EAAYD,EAAQ,cAAgB,iBACpCE,EAAaF,EAAQ,eAAiB,KACtCG,EAAMH,EAAQ,QAAU,KACxBI,EAAWJ,EAAQ,aAAeA,EAAQ,SAAW,KACrDK,EAASL,EAAQ,WAVD,6CAWhBM,EAASN,EAAQ,WAVD,6CAWhBO,EAAUP,EAAQ,YAAcQ,iBAapCC,YAAWlB,GAAKmB,EAJd,0MAIuC,MAbyBlB,EAC9DmB,EAAWX,EAAQ,aAVD,IAWxB,IAAIY,EAAgBZ,EAAQ,UAVP,GA2BrBS,YAAWlB,GAAKmB,EAAUT,IAAY,IAKtC,IAAIY,EAAYC,SAASC,cAAc,aAgCvC,SAASL,EAAUM,IAgGnB,SAAiBC,EAAaC,EAAO,IAC5BC,UAAU,CAAEC,QAAS,KAArBD,CAA8B,CACnCE,IAAK,CACH,WAAYC,EACZ,YAAahB,EACb,IAAKD,EACL,MAAOY,EACP,MAAOM,mBAAmBC,KAAKC,UAAUP,KACzCQ,KAAK,MAvGTC,CAAQpB,EAAS,CACfqB,OAAQC,EAAgB,CAAED,OAAQZ,IAChCc,MAAOlB,IAOb,SAASmB,EAAoBD,GAC3BjB,EAAUiB,MAAQA,EAMpB,SAASD,EAAgBb,GAcvB,OAbIA,GAAUA,EAAc,QAAGJ,EAAgBI,EAAc,OAC7De,EAAoBnB,GACpBI,EAAOc,MAAQlB,EACfC,EAAUmB,UAgBZ,SAAqBhB,GAEnB,OADYA,EAAOiB,MAAM,KACZC,OAAOvB,GAAUe,KAAK,KAlBbS,CAAYnB,EAAOY,QAGzCQ,aAAaP,EAAgBQ,MAC7BR,EAAgBQ,KAAO5B,YAAW6B,MAAMD,IACtCxB,EAAUmB,UAAY,IACtBO,OAAOC,OAAOC,OACdD,MACgB,KAAbzC,GAEEc,EAAUmB,UAcnBM,eAAeE,IAWf,IAAeE,QAAAA,EAVD,IAWL,IAAIC,SAAQC,GAAWnC,WAAWmC,EAASF,MAVlDH,OAAOC,OAAO,CAAEtC,WAA0B,MAAdA,IAAsB2C,MAAK7B,IACrDN,EAAUM,GACV8B,KAAO,MACNC,OAAMxD,IAAK,IAahB,SAASS,EAAQgD,GACf,MAAMC,EAAS,GACTC,EAAOC,SAASD,KAEtB,OAAIA,EAAKE,QAAQ,KAAO,EAAU,IAElCF,EAAKjB,MAAM,KAAK,GAAGA,MAAM,KAAKoB,SAAQC,IACpC,MAAMC,EAAKD,EAAErB,MAAM,KACnBgB,EAAOM,EAAG,IAAMA,EAAG,MAGjBP,KAAOC,EAAeO,mBAAmBP,EAAOD,IAE7C,IAmBT,MAAM1B,EAAS,MAAQ1B,KAAKC,SAAW,IAAIoC,MAAM,KAAK,GAAK,eA1H3DK,iBA6GA,IAAqCmB,EAAAA,EA3GXzC,GAAUa,EAAgBb,GA4GlD0C,UAAU,CACRrD,OAAQA,EACNE,QA9GWA,EA+GXoD,QAASC,IACTA,EAAQN,EAAED,SAAQM,GAAWF,EAASE,EAAQE,QA7GlD9B,EAAoBnB,GAGhBR,IAAUmC,OAAOuB,YAAYC,KAAO3D,GAG7B,OAAPD,IAGJqC,IAGAD,OAAOC,OAAOwB,GAAGC,IAAIzB,GACrBD,OAAOC,OAAOwB,GAAGE,MAAM1B,GAGvBD,OAAOC,OAAOwB,GAAGG,QAAQzD,IAiI3B0D,IArMD","sources":["src/subtitles.js"],"sourcesContent":["(e => {\n  'use strict';\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Settings\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  const defaultSubkey = 'sub-c-79b0a26a-80a9-11e8-8f4a-96bbd71e7d14';\n  const defaultPubkey = 'pub-c-fd9b97a4-7b78-4ae1-a21e-3614f2b6debe';\n  const defaultChannel = uuid();\n  const defaultMaxWords = 250;\n  const defaultStyle = '';\n  const clearTime = +uripart('cleartime') || 4; // Seconds\n  const introText = uripart('introtext') || 'Start talking.';\n  const continuous = uripart('continuous') || 'on';\n  const mic = uripart('mic') || 'on';\n  const language = uripart('language') || uripart('lang') || null;\n  const subkey = uripart('subkey') || defaultSubkey;\n  const pubkey = uripart('pubkey') || defaultPubkey;\n  const channel = uripart('channel') || username() || askchannel() || defaultChannel;\n  const maxWords = uripart('maxwords') || defaultMaxWords;\n  let subtitleStyle = uripart('style') || defaultStyle;\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Ask for Channel\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  function askchannel() {\n    let instructions =\n      \"Missing configuration!<br>\" +\n      \"<a href='https://github.com/stephenlb/twitch-tv-obs-subtitles/\" +\n      \"blob/master/readme.md#running-twitchtv-subtitles-from-local-\" +\n      \"files-on-your-hard-drive'>Follow Instructions</a>\";\n    setTimeout(e => candidate(instructions), 1000);\n  }\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Introduction Text\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  setTimeout(e => candidate(introText), 10);\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // UI Elements\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  let subtitles = document.querySelector('#subtitle');\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Main\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  async function main() {\n    // Listen for OBS Updates\n    startSubscribe(channel, speech => updateSubtitles(speech));\n\n    // Set Styles of Subtiltle Text\n    updateSubtitleStyle(subtitleStyle);\n\n    // Set Language\n    if (language) spoken.recognition.lang = language;\n\n    // Listen to Microphone\n    if (mic == 'off') return;\n\n    // Listen for Words\n    listen();\n\n    // Continuous Listening\n    spoken.listen.on.end(listen);\n    spoken.listen.on.error(listen);\n\n    // Search Giphy Image\n    spoken.listen.on.partial(candidate);\n  }\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Word Search Candidate\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  function candidate(speech) {\n    publish(channel, {\n      phrase: updateSubtitles({ phrase: speech })\n      , style: subtitleStyle\n    });\n  }\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Update Subtitles Style\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  function updateSubtitleStyle(style) {\n    subtitles.style = style;\n  }\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Update Subtitles\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  function updateSubtitles(speech) {\n    if (speech && speech['style']) subtitleStyle = speech['style'];\n    updateSubtitleStyle(subtitleStyle);\n    speech.style = subtitleStyle;\n    subtitles.innerHTML = getMaxWords(speech.phrase);\n\n    // Clear Text after moments of silence.\n    clearTimeout(updateSubtitles.ival);\n    updateSubtitles.ival = setTimeout(async ival => {\n      subtitles.innerHTML = ' ';\n      spoken.listen.stop();\n      listen();\n    }, (+clearTime) * 1000);\n\n    return subtitles.innerHTML;\n  }\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Ensure only maxWords are displayed on the screen\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  function getMaxWords(speech) {\n    let words = speech.split(' ');\n    return words.slice(-maxWords).join(' ');\n  }\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Listen for Voice Commands\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  async function listen() {\n    await delay(200);\n    spoken.listen({ continuous: continuous == 'on' }).then(speech => {\n      candidate(speech);\n      used = {};\n    }).catch(e => true);\n  }\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Easy Wait Command\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  function delay(duration) {\n    return new Promise(resolve => setTimeout(resolve, duration));\n  }\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Get URI Parameters\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  function uripart(key) {\n    const params = {};\n    const href = location.href;\n\n    if (href.indexOf('?') < 0) return '';\n\n    href.split('?')[1].split('&').forEach(m => {\n      const kv = m.split('=');\n      params[kv[0]] = kv[1];\n    });\n\n    if (key in params) return decodeURIComponent(params[key]);\n\n    return '';\n  }\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Subscribe for OBS Updates\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  function startSubscribe(channelName, callback) {\n    subscribe({\n      subkey: subkey\n      , channel: channelName\n      , message: payload => {\n        payload.m.forEach(message => callback(message.d));\n      }\n    });\n  }\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Publish Captured Subtitles\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  const origin = 'ps' + (Math.random() + '').split('.')[1] + '.pubnub.com';\n  function publish(channelName, data = {}) {\n    return requester({ timeout: 10000 })({\n      url: [\n        'https://', origin,\n        '/publish/', pubkey,\n        '/', subkey,\n        '/0/', channelName,\n        '/0/', encodeURIComponent(JSON.stringify(data))\n      ].join('')\n    });\n  }\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // UUID\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  function uuid() {\n    let u = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,\n      function (c) {\n        let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n      });\n    return u;\n  }\n\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  // Run Main Function\n  // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n  main();\n\n})();\n"],"names":["e","defaultChannel","replace","c","r","Math","random","toString","clearTime","uripart","introText","continuous","mic","language","subkey","pubkey","channel","username","setTimeout","candidate","maxWords","subtitleStyle","subtitles","document","querySelector","speech","channelName","data","requester","timeout","url","origin","encodeURIComponent","JSON","stringify","join","publish","phrase","updateSubtitles","style","updateSubtitleStyle","innerHTML","split","slice","getMaxWords","clearTimeout","ival","async","spoken","listen","stop","duration","Promise","resolve","then","used","catch","key","params","href","location","indexOf","forEach","m","kv","decodeURIComponent","callback","subscribe","message","payload","d","recognition","lang","on","end","error","partial","main"],"version":3,"file":"index.d5e6414b.js.map"}